name: ci-terraform-eks-workflow
on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  PREFIX: ${{ secrets.PREFIX }}
  KUBERNETES_ROLE_ARN: ${{ secrets.KUBERNETES_ROLE_ARN }}

jobs:
  create-infra-eks:
    name: Setup infrastructure with terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.5
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        run: terraform init -var "workspace=production" -var "prefix=${{ env.PREFIX }}"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform validate
        id: validate
        run: terrafom validate -no-color
        continue-on-error: true

      - name: Select production Workspace
        run: terraform workspace select production
        continue-on-error: true

      - name: Check workspace
        id: check_workspace
        run: terraform workspace show

      - name: Output workspace
        id: output_workspace
        run: echo ::set-output name=key::${{ steps.check_workspace.outputs['stdout'] }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Connect with cluster
        run: aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.PREFIX }}-${{ env.CLUSTER_NAME }}

      - uses: swdotcom/update-and-apply-kubernetes-configs@v1
        with:
          k8-config-file-paths: |
            manifests/security.yaml
          replacement-method: defined
        env:
          KUBERNETES_ROLE_ARN: ${{ env.KUBERNETES_ROLE_ARN }}

      - name: Deploy
        run: kubectl apply -f manifests/

      - name: Status
        run: |-
          kubectl get pods -n kube-system
